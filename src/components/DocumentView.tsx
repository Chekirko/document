"use client"; // –û–±–æ–≤'—è–∑–∫–æ–≤–∞ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞, —â–æ –ø–æ–∑–Ω–∞—á–∞—î —Ü–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —è–∫ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–∏–π

import { useState, useTransition } from "react";
import { ArrowLeft, FileText, Calendar, Tag, Brain, Clock } from "lucide-react";
import { useRouter } from "next/navigation";

// –í–∞–∂–ª–∏–≤–æ: –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ —Ç–∏–ø–∞–º–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
// –Ø–∫—â–æ –≤–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ src/lib/data.ts, —è–∫ —É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ
import type { TestDocument, DocumentAnalysis } from "@/types";
import { analyzeDocumentAction } from "@/lib/actions/actions";
// –¶–µ–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–∏—Å—É—î –¥–∞–Ω—ñ, —è–∫—ñ –ø–æ–≤–µ—Ä—Ç–∞—î –≤–∞—à API –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É

// –ü—Ä–æ–ø—Å–∏ –¥–ª—è –Ω–∞—à–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: –≤—ñ–Ω –æ—Ç—Ä–∏–º—É—î –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
interface DocumentViewProps {
  initialDocument: TestDocument;
}

export default function DocumentView({ initialDocument }: DocumentViewProps) {
  const router = useRouter();

  // –°—Ç–∞–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –æ–¥—Ä–∞–∑—É –∑ –ø—Ä–æ–ø—Å—ñ–≤.
  // –ë—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å—Ç–∞–Ω `loading` –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.
  const [document] = useState<TestDocument>(initialDocument);

  // –¶—ñ —Å—Ç–∞–Ω–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –¥—ñ—ó –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ (–∑–∞–ø–∏—Ç –∞–Ω–∞–ª—ñ–∑—É)
  const [analysis, setAnalysis] = useState<DocumentAnalysis | null>(null);
  //   const [analysisLoading, setAnalysisLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [showAnalysis, setShowAnalysis] = useState(false);
  const [isPending, startTransition] = useTransition();

  // –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –¥—ñ—î—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∫–ª—ñ–∫–æ–º)
  //   const fetchAnalysis = async () => {
  //     if (!document) return;

  //     try {
  //       setAnalysisLoading(true);
  //       setError(null); // –°–∫–∏–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–º–∏–ª–∫–∏

  //       // –†–æ–±–∏–º–æ –∑–∞–ø–∏—Ç –¥–æ API-–µ–Ω–¥–ø–æ—ñ–Ω—Ç—É, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –∞–Ω–∞–ª—ñ–∑
  //       const response = await fetch(`/api/documents/${document.id}/analyze`);
  //       const data = await response.json();

  //       if (response.ok) {
  //         setAnalysis(data);
  //         setShowAnalysis(true);
  //       } else {
  //         // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥ API
  //         throw new Error(data.error || "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É");
  //       }
  //     } catch (error) {
  //       let errorMessage = "–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞";

  //       // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î `error` –µ–∫–∑–µ–º–ø–ª—è—Ä–æ–º –∫–ª–∞—Å—É Error
  //       if (error instanceof Error) {
  //         errorMessage = error.message; // –¢–µ–ø–µ—Ä TypeScript –∑–Ω–∞—î, —â–æ —Ç—É—Ç —î –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `message`
  //       }

  //       console.error(errorMessage);
  //       setError(errorMessage);
  //     } finally {
  //       setAnalysisLoading(false);
  //     }
  //   };

  const handleAnalysis = () => {
    if (!document) return;

    setError(null);

    // `startTransition` –ø–æ–≤—ñ–¥–æ–º–ª—è—î React, —â–æ –º–∏ –ø–æ—á–∏–Ω–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è,
    // —è–∫–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å. –¶–µ –¥–æ–∑–≤–æ–ª—è—î UI –∑–∞–ª–∏—à–∞—Ç–∏—Å—è –≤—ñ–¥–≥—É–∫–ª–∏–≤–∏–º.
    startTransition(async () => {
      // –ü—Ä–æ—Å—Ç–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –Ω–∞—à—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –Ω–∞–ø—Ä—è–º—É!
      const result = await analyzeDocumentAction(document.id);

      if (result.success) {
        // –Ø–∫—â–æ –≤—Å–µ –¥–æ–±—Ä–µ, –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–∞–Ω–∏–º–∏
        setAnalysis(result.data);
        setShowAnalysis(true);
      } else {
        // –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ, –ø–æ–∫–∞–∑—É—î–º–æ —ó—ó
        setError(result.error);
      }
    });
  };

  // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
  const getDocumentTypeLabel = (type: string) => {
    const types: Record<string, string> = {
      council_decision: "–†—ñ—à–µ–Ω–Ω—è –º—ñ—Å—å–∫–æ—ó —Ä–∞–¥–∏",
      executive_decision: "–†—ñ—à–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∫–æ–º—É",
      mayor_order: "–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –º–µ—Ä–∞",
      draft_decision: "–ü—Ä–æ–µ–∫—Ç —Ä—ñ—à–µ–Ω–Ω—è",
    };
    return types[type] || type;
  };

  const formatDate = (dateString: string) => {
    try {
      return new Date(dateString).toLocaleDateString("uk-UA", {
        year: "numeric",
        month: "long",
        day: "numeric",
      });
    } catch (e) {
      console.error("–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏:", e);
      return "–ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞";
    }
  };

  // JSX –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Header */}
      <header className="bg-white shadow-lg border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center py-6">
            <button
              onClick={() => router.back()}
              className="flex items-center text-gray-600 hover:text-gray-900 mr-4"
            >
              <ArrowLeft className="h-5 w-5 mr-1" />
              –ù–∞–∑–∞–¥
            </button>
            <div className="flex items-center space-x-3">
              <FileText className="h-8 w-8 text-blue-600" />
              <div>
                <h1 className="text-2xl font-bold text-gray-900">
                  –î–æ–∫—É–º–µ–Ω—Ç–∏ –æ–Ω–ª–∞–π–Ω
                </h1>
                <p className="text-sm text-gray-600">–î–µ—Ç–∞–ª—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞</p>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* Document Header */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <div className="mb-4">
                <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                  {getDocumentTypeLabel(document.document_type)}
                </span>
              </div>

              <h1 className="text-2xl font-bold text-gray-900 mb-4">
                {document.title}
              </h1>

              <div className="flex items-center space-x-4 text-sm text-gray-500 mb-6">
                <span className="flex items-center">
                  <Calendar className="h-4 w-4 mr-1" />
                  {formatDate(document.date_created)}
                </span>
              </div>

              <div className="flex flex-wrap gap-2">
                {document.categories.map((category) => (
                  <span
                    key={category}
                    className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
                  >
                    <Tag className="h-3 w-3 mr-1" />
                    {category}
                  </span>
                ))}
              </div>
            </div>

            {/* AI Analysis Button */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold text-gray-900 flex items-center">
                  <Brain className="h-5 w-5 mr-2 text-blue-600" />
                  AI-–ê–Ω–∞–ª—ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                </h2>
                {!showAnalysis && (
                  <button
                    onClick={handleAnalysis}
                    disabled={isPending}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center space-x-2 transition-colors"
                  >
                    {isPending ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
                        <span>–ê–Ω–∞–ª—ñ–∑—É—é...</span>
                      </>
                    ) : (
                      <>
                        <Brain className="h-4 w-4" />
                        <span>–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑</span>
                      </>
                    )}
                  </button>
                )}
              </div>

              {error && <p className="text-sm text-red-600 mb-4">{error}</p>}

              {showAnalysis && analysis && (
                <div className="space-y-6 animate-fade-in">
                  {/* Simple Explanation */}
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <h3 className="font-semibold text-blue-900 mb-2 flex items-center">
                      ü§ù –ó—Ä–æ–∑—É–º—ñ–ª–æ—é –º–æ–≤–æ—é:
                    </h3>
                    <p className="text-blue-800">
                      {analysis.simple_explanation}
                    </p>
                  </div>

                  {/* Summary */}
                  <div className="p-4 bg-green-50 rounded-lg">
                    <h3 className="font-semibold text-green-900 mb-2 flex items-center">
                      üìã –ö–æ—Ä–æ—Ç–∫–∏–π –ø—ñ–¥—Å—É–º–æ–∫:
                    </h3>
                    <p className="text-green-800">{analysis.summary}</p>
                  </div>

                  {/* Key Points */}
                  {analysis.key_points && analysis.key_points.length > 0 && (
                    <div className="p-4 bg-yellow-50 rounded-lg">
                      <h3 className="font-semibold text-yellow-900 mb-3 flex items-center">
                        üîç –ö–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏:
                      </h3>
                      <ul className="space-y-2">
                        {analysis.key_points.map((point, index) => (
                          <li
                            key={index}
                            className="flex items-start text-yellow-800"
                          >
                            <span className="inline-block w-2 h-2 bg-yellow-600 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                            <span>{point}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {/* Analysis Metadata */}
                  <div className="flex items-center justify-between text-sm text-gray-500 pt-4 border-t border-gray-200">
                    <div className="flex items-center space-x-4">
                      <span className="flex items-center">
                        <Clock className="h-4 w-4 mr-1" />
                        –ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥{" "}
                        {new Date(analysis.processing_time).toLocaleString(
                          "uk-UA"
                        )}
                      </span>
                      <span>
                        –¢–æ—á–Ω—ñ—Å—Ç—å: {(analysis.confidence * 100).toFixed(0)}%
                      </span>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Document Content */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">
                –ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
              </h2>
              <div className="prose prose-lg max-w-none text-gray-700 whitespace-pre-line">
                {document.content}
              </div>
            </div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Document Info */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <h3 className="font-semibold text-gray-900 mb-4">
                –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ–∫—É–º–µ–Ω—Ç
              </h3>
              <div className="space-y-3 text-sm">
                <div>
                  <dt className="font-medium text-gray-500">–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞</dt>
                  <dd className="text-gray-900">
                    {getDocumentTypeLabel(document.document_type)}
                  </dd>
                </div>
                <div>
                  <dt className="font-medium text-gray-500">–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</dt>
                  <dd className="text-gray-900">
                    {formatDate(document.date_created)}
                  </dd>
                </div>
                <div>
                  <dt className="font-medium text-gray-500">ID –¥–æ–∫—É–º–µ–Ω—Ç–∞</dt>
                  <dd className="text-gray-900">#{document.id}</dd>
                </div>
              </div>
            </div>

            {/* Related Topics */}
            {analysis &&
              analysis.related_topics &&
              analysis.related_topics.length > 0 && (
                <div className="bg-white rounded-lg shadow-lg p-6 animate-fade-in">
                  <h3 className="font-semibold text-gray-900 mb-4">
                    –ü–æ–≤&apos;—è–∑–∞–Ω—ñ —Ç–µ–º–∏
                  </h3>
                  <div className="flex flex-wrap gap-2">
                    {analysis.related_topics.map((topic) => (
                      <span
                        key={topic}
                        className="inline-block px-3 py-1 bg-gray-100 text-gray-800 rounded-full text-sm"
                      >
                        {topic}
                      </span>
                    ))}
                  </div>
                </div>
              )}

            {/* Actions */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <h3 className="font-semibold text-gray-900 mb-4">–î—ñ—ó</h3>
              <div className="space-y-3">
                <button
                  onClick={() => window.print()}
                  className="w-full px-4 py-2 bg-gray-100 text-gray-800 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center"
                >
                  üìÑ <span className="ml-2">–†–æ–∑–¥—Ä—É–∫—É–≤–∞—Ç–∏</span>
                </button>
                <button
                  onClick={() =>
                    navigator.share?.({
                      title: document.title,
                      url: window.location.href,
                    })
                  }
                  className="w-full px-4 py-2 bg-gray-100 text-gray-800 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center"
                >
                  üîó <span className="ml-2">–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
