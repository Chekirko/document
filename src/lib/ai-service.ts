// import OpenAI from "openai";

// const openai = new OpenAI({
//   apiKey: process.env.OPENAI_API_KEY,
// });

// export interface AIAnalysisResult {
//   summary: string;
//   simple_explanation: string;
//   key_points: string[];
//   category: string;
//   confidence: number;
// }

// export class AIService {
//   async analyzeDocument(
//     title: string,
//     content: string
//   ): Promise<AIAnalysisResult> {
//     const prompt = `
// –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ–π –¥–æ–∫—É–º–µ–Ω—Ç –º—ñ—Å—å–∫–æ—ó —Ä–∞–¥–∏ —Ç–∞ –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:

// –ù–∞–∑–≤–∞: ${title}
// –ó–º—ñ—Å—Ç: ${content}

// –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏:
// 1. summary - –∫–æ—Ä–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ (1-2 —Ä–µ—á–µ–Ω–Ω—è)
// 2. simple_explanation - –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—é –º–æ–≤–æ—é –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –≥—Ä–æ–º–∞–¥—è–Ω
// 3. key_points - –º–∞—Å–∏–≤ –∑ 3-5 –∫–ª—é—á–æ–≤–∏—Ö –ø—É–Ω–∫—Ç—ñ–≤
// 4. category - –æ—Å–Ω–æ–≤–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è (–±—é–¥–∂–µ—Ç, –æ—Å–≤—ñ—Ç–∞, –º–µ–¥–∏—Ü–∏–Ω–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –±–ª–∞–≥–æ—É—Å—Ç—Ä—ñ–π, –∑–µ–º–µ–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è, –∫–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏, —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è, —ñ–Ω—à–µ)
// 5. confidence - —Ä—ñ–≤–µ–Ω—å –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ –≤ –∞–Ω–∞–ª—ñ–∑—ñ (0-1)

// –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò –≤–∞–ª—ñ–¥–Ω–∏–º JSON –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É:
// `;

//     try {
//       const response = await openai.chat.completions.create({
//         model: "gpt-4o-mini",
//         messages: [{ role: "user", content: prompt }],
//         temperature: 0.7,
//       });

//       const result = JSON.parse(response.choices[0].message.content || "{}");
//       return result;
//     } catch (error) {
//       console.error("AI Analysis Error:", error);
//       // Fallback response
//       return {
//         summary: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
//         simple_explanation: "–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—ñ–∑–Ω—ñ—à–µ",
//         key_points: ["–î–æ–∫—É–º–µ–Ω—Ç –ø–æ—Ç—Ä–µ–±—É—î —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"],
//         category: "—ñ–Ω—à–µ",
//         confidence: 0.5,
//       };
//     }
//   }

//   async generateChatResponse(
//     query: string,
//     // eslint-disable-next-line @typescript-eslint/no-explicit-any
//     relevantDocs: any[]
//   ): Promise<{
//     response: string;
//     sources: { title: string; confidence: number }[];
//     confidence: number;
//   }> {
//     const docsContext = relevantDocs
//       .map((doc) => `–î–æ–∫—É–º–µ–Ω—Ç: ${doc.title}\n–ó–º—ñ—Å—Ç: ${doc.content}\n---`)
//       .join("\n");

//     const prompt = `
// –¢–∏ - –∞—Å–∏—Å—Ç–µ–Ω—Ç –º—ñ—Å—å–∫–æ—ó —Ä–∞–¥–∏, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –≥—Ä–æ–º–∞–¥—è–Ω–∞–º –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.
// –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.

// –ü–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${query}

// –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏:
// ${docsContext}

// –î–∞–π –∫–æ—Ä–∏—Å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ü–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤. –Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ, —á–µ—Å–Ω–æ –ø—Ä–æ —Ü–µ —Å–∫–∞–∂–∏.
// `;

//     try {
//       const response = await openai.chat.completions.create({
//         model: "gpt-4o-mini",
//         messages: [{ role: "user", content: prompt }],
//         temperature: 0.7,
//       });

//       return {
//         response:
//           response.choices[0].message.content ||
//           "–í–∏–±–∞—á—Ç–µ, –Ω–µ –º–æ–∂—É —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
//         sources: relevantDocs.map((doc) => ({
//           title: doc.title,
//           confidence: 0.8,
//         })),
//         confidence: 0.8,
//       };
//     } catch (error) {
//       console.error("Chat Response Error:", error);
//       return {
//         response: "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.",
//         sources: [],
//         confidence: 0.0,
//       };
//     }
//   }
// }

// export const aiService = new AIService();

import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export interface AIAnalysisResult {
  summary: string;
  simple_explanation: string;
  key_points: string[];
  category: string;
  confidence: number;
}

export class AIService {
  async analyzeDocument(
    title: string,
    content: string
  ): Promise<AIAnalysisResult> {
    const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ–π –¥–æ–∫—É–º–µ–Ω—Ç –º—ñ—Å—å–∫–æ—ó —Ä–∞–¥–∏ —Ç–∞ –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:

–ù–∞–∑–≤–∞: ${title}
–ó–º—ñ—Å—Ç: ${content}

–ü–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏:
1. summary - –∫–æ—Ä–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ (1-2 —Ä–µ—á–µ–Ω–Ω—è)
2. simple_explanation - –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—é –º–æ–≤–æ—é –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –≥—Ä–æ–º–∞–¥—è–Ω
3. key_points - –º–∞—Å–∏–≤ –∑ 3-5 –∫–ª—é—á–æ–≤–∏—Ö –ø—É–Ω–∫—Ç—ñ–≤
4. category - –æ—Å–Ω–æ–≤–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è (–±—é–¥–∂–µ—Ç, –æ—Å–≤—ñ—Ç–∞, –º–µ–¥–∏—Ü–∏–Ω–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –±–ª–∞–≥–æ—É—Å—Ç—Ä—ñ–π, –∑–µ–º–µ–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è, –∫–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏, —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è, —ñ–Ω—à–µ)
5. confidence - —Ä—ñ–≤–µ–Ω—å –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ –≤ –∞–Ω–∞–ª—ñ–∑—ñ (0-1)
`;

    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7,
        response_format: { type: "json_object" }, // üîë –≥–∞—Ä–∞–Ω—Ç—ñ—è JSON
      });

      const raw = response.choices[0].message.content || "{}";
      const result = JSON.parse(raw);
      return result;
    } catch (error) {
      console.error("AI Analysis Error:", error);
      // Fallback response
      return {
        summary: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
        simple_explanation: "–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—ñ–∑–Ω—ñ—à–µ",
        key_points: ["–î–æ–∫—É–º–µ–Ω—Ç –ø–æ—Ç—Ä–µ–±—É—î —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"],
        category: "—ñ–Ω—à–µ",
        confidence: 0.5,
      };
    }
  }

  async generateChatResponse(
    query: string,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    relevantDocs: any[]
  ): Promise<{
    response: string;
    sources: { title: string; confidence: number }[];
    confidence: number;
  }> {
    const docsContext = relevantDocs
      .map((doc) => `–î–æ–∫—É–º–µ–Ω—Ç: ${doc.title}\n–ó–º—ñ—Å—Ç: ${doc.content}\n---`)
      .join("\n");

    const prompt = `
–¢–∏ - –∞—Å–∏—Å—Ç–µ–Ω—Ç –º—ñ—Å—å–∫–æ—ó —Ä–∞–¥–∏, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –≥—Ä–æ–º–∞–¥—è–Ω–∞–º –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.

–ü–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${query}

–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏:
${docsContext}

–î–∞–π –∫–æ—Ä–∏—Å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ü–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤. –Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ, —á–µ—Å–Ω–æ –ø—Ä–æ —Ü–µ —Å–∫–∞–∂–∏.
`;

    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7,
      });

      return {
        response:
          response.choices[0].message.content ||
          "–í–∏–±–∞—á—Ç–µ, –Ω–µ –º–æ–∂—É —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
        sources: relevantDocs.map((doc) => ({
          title: doc.title,
          confidence: 0.8,
        })),
        confidence: 0.8,
      };
    } catch (error) {
      console.error("Chat Response Error:", error);
      return {
        response: "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.",
        sources: [],
        confidence: 0.0,
      };
    }
  }
}

export const aiService = new AIService();
